package main

import "testing"

func TestEval(t *testing.T) {
	type testCase struct {
		lines    []string
		expected string
	}

	tCases := []testCase{
		{
			lines:    []string{"[[[[[9,8],1],2],3],4]"},
			expected: "[[[[0,9],2],3],4]",
		},
		{
			lines:    []string{"[7,[6,[5,[4,[3,2]]]]]"},
			expected: "[7,[6,[5,[7,0]]]]",
		},
		{
			lines:    []string{"[[6,[5,[4,[3,2]]]],1]"},
			expected: "[[6,[5,[7,0]]],3]",
		},
		{
			lines:    []string{"[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"},
			expected: "[[3,[2,[8,0]]],[9,[5,[7,0]]]]",
		},
		{
			lines:    []string{"[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]"},
			expected: "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]",
		},
		{
			lines:    []string{"[1,1]", "[2,2]", "[3,3]", "[4,4]"},
			expected: "[[[[1,1],[2,2]],[3,3]],[4,4]]",
		},
		{
			lines:    []string{"[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]"},
			expected: "[[[[3,0],[5,3]],[4,4]],[5,5]]",
		},
		{
			lines:    []string{"[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]", "[6,6]"},
			expected: "[[[[5,0],[7,4]],[5,5]],[6,6]]",
		},
		{
			lines: []string{
				"[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
				"[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
			},
			expected: "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
		},
		{
			lines: []string{"[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
				"[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
				"[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
				"[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
				"[7,[5,[[3,8],[1,4]]]]",
				"[[2,[2,2]],[8,[8,1]]]",
				"[2,9]",
				"[1,[[[9,3],9],[[9,0],[0,7]]]]",
				"[[[5,[7,4]],7],1]",
				"[[[[4,2],2],6],[8,7]]",
			},
			expected: "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]",
		},
	}

	for _, tCase := range tCases {
		pairs := []*pair{}
		for _, line := range tCase.lines {
			pairs = append(pairs, parseLine(line))
		}
		result := eval(pairs)
		actual := pairToStr(result)
		if tCase.expected != actual {
			t.Errorf("%v failed\nexpected %s\nactual %s", tCase.lines, tCase.expected, actual)
		}
	}
}
